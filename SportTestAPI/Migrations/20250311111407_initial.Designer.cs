// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportTestAPI.Database;

#nullable disable

namespace SportTestAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250311111407_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportTestAPI.DataModels.AgeGroup", b =>
                {
                    b.Property<int>("AgeGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgeGroupID"));

                    b.Property<string>("AvailableDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgeGroupID");

                    b.ToTable("AgeGroups");

                    b.HasData(
                        new
                        {
                            AgeGroupID = 1,
                            AvailableDays = "12",
                            GroupName = "Under 18"
                        },
                        new
                        {
                            AgeGroupID = 2,
                            AvailableDays = "12",
                            GroupName = "18-35"
                        },
                        new
                        {
                            AgeGroupID = 3,
                            AvailableDays = "12",
                            GroupName = "36-50"
                        },
                        new
                        {
                            AgeGroupID = 4,
                            AvailableDays = "12",
                            GroupName = "Above 50"
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88f97a79-7c71-46ea-8f4f-67b9a798d545",
                            Contact = "",
                            Email = "KK@GMAIL.COM",
                            EmailConfirmed = false,
                            FullName = "John Doe",
                            Gender = "m",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            Role = "Admin",
                            SecurityStamp = "46745e64-f998-4461-ad9f-fcc90c6b9cd2",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "143",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2d1dfa0-0830-4a46-95a4-ac6552ae69bb",
                            Contact = "",
                            Email = "KK@GMAIL.COM",
                            EmailConfirmed = false,
                            FullName = "Jane Doe",
                            Gender = "f",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            Role = "User",
                            SecurityStamp = "b0fbf43f-ec1f-411d-9022-2728f2840983",
                            TwoFactorEnabled = false,
                            UserName = "janedoe"
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int>("CourtID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingID");

                    b.HasIndex("CourtID");

                    b.HasIndex("UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Coach", b =>
                {
                    b.Property<int>("CoachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoachID");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            CoachID = 1,
                            Name = "Coach John",
                            ProfilePic = "",
                            Specialty = ""
                        },
                        new
                        {
                            CoachID = 2,
                            Name = "Coach Lisa",
                            ProfilePic = "",
                            Specialty = ""
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Court", b =>
                {
                    b.Property<int>("CourtID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtID");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            CourtID = 1,
                            Location = "Building A",
                            Name = "Court 1",
                            Picture = ""
                        },
                        new
                        {
                            CourtID = 2,
                            Location = "Building B",
                            Name = "Court 2",
                            Picture = ""
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("UserID");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceID = 1,
                            Amount = 100m,
                            DateIssued = new DateTime(2025, 3, 11, 12, 14, 6, 846, DateTimeKind.Local).AddTicks(1971),
                            PaymentMethod = "",
                            Status = "Active",
                            UserID = "123"
                        },
                        new
                        {
                            InvoiceID = 2,
                            Amount = 150m,
                            DateIssued = new DateTime(2025, 3, 11, 12, 14, 6, 846, DateTimeKind.Local).AddTicks(2030),
                            PaymentMethod = "",
                            Status = "DeActive",
                            UserID = "143"
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Player1ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Player2ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("Player1ID");

                    b.HasIndex("Player2ID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            MatchID = 1,
                            Date = new DateTime(2025, 3, 11, 12, 14, 6, 846, DateTimeKind.Local).AddTicks(2124),
                            Player1ID = "123",
                            Player2ID = "143",
                            Score = "20",
                            TournamentID = 1
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Tournment", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventPic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentID");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            TournamentID = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPic = "",
                            Name = "Summer Open"
                        },
                        new
                        {
                            TournamentID = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPic = "",
                            Name = "Winter Championship"
                        });
                });

            modelBuilder.Entity("SportTestAPI.DataModels.TrainingSession", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<int>("AgeGroupID")
                        .HasColumnType("int");

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionID");

                    b.HasIndex("AgeGroupID");

                    b.HasIndex("CoachID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("UserID");

                    b.ToTable("TrainingSessions");

                    b.HasData(
                        new
                        {
                            SessionID = 1,
                            AgeGroupID = 1,
                            CoachID = 1,
                            Date = new DateTime(2025, 3, 11, 12, 14, 6, 846, DateTimeKind.Local).AddTicks(2093),
                            DayOfWeek = "1",
                            Duration = 0,
                            Fee = 0m,
                            InvoiceID = 1,
                            Location = "A",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            UserID = "123"
                        },
                        new
                        {
                            SessionID = 2,
                            AgeGroupID = 2,
                            CoachID = 2,
                            Date = new DateTime(2025, 3, 11, 12, 14, 6, 846, DateTimeKind.Local).AddTicks(2101),
                            DayOfWeek = "1",
                            Duration = 0,
                            Fee = 0m,
                            InvoiceID = 2,
                            Location = "B",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            UserID = "143"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Booking", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Invoice", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Match", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.Tournment", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.TrainingSession", b =>
                {
                    b.HasOne("SportTestAPI.DataModels.AgeGroup", "AgeGroup")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("AgeGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.Coach", "Coach")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportTestAPI.DataModels.ApplicationUser", "User")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("Coach");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.AgeGroup", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Invoices");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Coach", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Court", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SportTestAPI.DataModels.Tournment", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
